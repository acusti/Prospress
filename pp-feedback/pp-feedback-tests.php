<?php

add_action( 'admin_footer', 'pp_feedback_test' );

// Runs a suite of tests on the auction bid system.
function pp_feedback_test(){
	error_log("*****************************************************************");
	error_log("pp_feedback_test called ");

	//$blog_id = 1;
	
	clean_up_feedback_mocks( get_option( 'feedback_mocks' ) );

	$author_id	= 3;
	$winner_id	= 1;
	$blog_id	= 2;
	
	$counter = 3;
	$mock_ids = array();

	error_log("*****************************************************************");
	for( $i = 1; $i < 4; $i++ ){
		$blog_id = $i;
		for( $t = 1; $t < 4; $t++ ){
			$author_id	= $t;
			for( $d = 1; $d < 4; $d++ ){
				$winner_id	= $d;
				$number++;
				$mock_ids[] = create_feedback_mocks( $number, $author_id, $winner_id, $blog_id );
			}
		}
	}

	update_option( 'feedback_mocks', $mock_ids );
	error_log("*****************************************************************");
}

function create_feedback_mocks( $number, $author_id, $winner_id, $blog_id = 1 ) {
	global $wpdb;

	error_log("** create_feedback_mocks called with $number, $author_id, $winner_id, $blog_id");

	switch_to_blog( $blog_id );
//	$mock_ids[ 'blog_id' ] = $blog_id;

	//Create a fake post
	$post = array(
		'post_author' => $author_id,
		'post_category' => 'test',
		'post_content' => 'Content of ' . $number . ' post auto generated by automated test.',
		'post_date' => '1984-01-22 06:30:47',
		'post_date_gmt' => '1984-01-22 06:30:47',
		'post_name' => 'test_' . $number, 
		'post_status' => 'ended', 
		'post_title' => 'Test Post ' . $number,
		'post_type' => 'post'
	);
	//error_log( "** inserting post = " . print_r( $post, true ) );
	$post_id = wp_insert_post( $post );

	//Set the end dates for the post
	update_post_meta( $post_id, 'post_end_date', '1984-01-22 06:30:47' ); 
	update_post_meta( $post_id, 'post_end_date_gmt', '1984-01-22 06:30:47' );

	//error_log( "** updated post meta for post ID $post_id on blog_id $blog_id" );
	
	$winning_bid_value = 123;
	// Insert a winning bid on the post 
	//$market_system->bid_form_submit( $post_id, 123, $winner_id );
	$bid = array('post_id' 	=> $post_id,
				'bidder_id' => $winner_id,
				'bid_value' => $winning_bid_value,
				'bid_status'=> 'winning',
				'bid_date'	=> '1984-01-22 06:30:47',
				'bid_date_gmt'=> '1984-01-22 06:30:47'
	);

	$wpdb->insert( $wpdb->bids, $bid );

	$wpdb->update( $wpdb->bidsmeta, array( 'meta_value' => $winning_bid_value ), array( 'bid_id' => $wpdb->insert_id, 'meta_key' => 'winning_bid_value' ) );

	$feedback = array(
				'for_user_id' => $author_id,
				'from_user_id' => $winner_id,
				'role' => 2, //1 seller, 2 buyer
				'feedback_score' => 1,
				'feedback_comment' => 'lil bitsa auto feedback number ' . $number . ' for ya',
				'feedback_status' => 'publish',
				'feedback_date' => '1984-01-22 06:30:47',
				'post_id' => $post_id,
				'blog_id' => $blog_id
				);

	//$wpdb->insert( $wpdb->feedback, $feedback );
	pp_update_feedback( $feedback );
	error_log( "** pp_update_feedback feedback = " . print_r( $feedback, true ) );

	//error_log( "** inserting in $wpdb->bids bid = " . print_r( $bid, true ) );
	//$mock_ids[$blog_id] = $wpdb->insert_id;

	restore_current_blog();

	return array( 'blog_id' => $blog_id, 'post_id' => $post_id );
}

function delete_feedback_mocks( $post_id, $blog_id = 1 ){
	global $wpdb;
	
	switch_to_blog( $blog_id );

	wp_delete_post( $post_id, true );
	error_log( "*** in delete_feedback_mocks, post_id $post_id and blog_id $blog_id" );

	delete_post_meta( $post_id, 'post_end_date' ); 
	delete_post_meta( $post_id, 'post_end_date_gmt' );

	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->bids WHERE post_id = %d", $post_id ) );
	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->feedback WHERE post_id = %d", $post_id ) );

	restore_current_blog();
}

function clean_up_feedback_mocks( $feedback_mocks ){
	global $wpdb;
	
	if( !$feedback_mocks ){
		error_log( "** in clean_up_feedback_mocks, returning as !feedback_mocks" );
		return;
	}

	//$post_ids = $wpdb->get_results( "SELECT ID FROM $wpdb->posts WHERE post_status = 'ended'", ARRAY_A );

	//error_log( "** in clean_up_feedback_mocks, feedback_mocks = " . print_r($feedback_mocks, true));

	foreach( $feedback_mocks as $feedback_mock )
		delete_feedback_mocks( $feedback_mock[ 'post_id' ], $feedback_mock[ 'blog_id' ] );

	update_option( 'feedback_mocks', '' );
	error_log("*****************************************************************");
	//error_log("Deleting all ended posts.");
	//$wpdb->query( "DELETE FROM $wpdb->posts WHERE post_status = 'ended'" );
	//$wpdb->query( "DELETE FROM $wpdb->bids WHERE post_id < 260" );

}
